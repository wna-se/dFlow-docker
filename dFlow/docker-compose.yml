# Build the image: docker build -t dflow .
# Run a demo environment: docker-compose up -d
# Stop the demo environment: docker-compose stop 
# Clear the demo environment: docker-compose rm
# 
# To access logs you can use docker exec <container id> -ti bash or add volumes to the containers

dflow:
  image: dflow
  links:
    - database:postgres
    - dflowrakedbsetup
  environment:
    - RAILS_ENV=production
    - DB_NAME=postgres
    - DB_PASSWD=mysecretpassword
    - DB_USER=postgres
    - DB_HOST=postgres
    - DB_PORT=5432
    - SECRET_KEY_BASE=f4533d10f31eb6dbf953123a4f6e8d85e5e4d0dfd7bb19bbc1cc5838d76a4598254e72182d235a2dd81cdbf3670f5ee8947377b8ffb803a81ad632dbc20b196f
  ports:
    - 80:80
#  volumes:
#    - /var/containerdata/dFlow/logs/dflow:/opt/dflow/log/ # Requires mapping permissions to the passenger user uid (app 9999)
#    - /var/containerdata/dFlow/logs/nginx:/var/log/nginx/
dflowrakedbsetup:
  image: dflow
  working_dir: /opt/dflow
  command: rake db:setup
  links:
    - database:postgres
  environment:
    - RAILS_ENV=production
    - DB_NAME=postgres
    - DB_PASSWD=mysecretpassword
    - DB_USER=postgres
    - DB_HOST=postgres
    - DB_PORT=5432
    - SECRET_KEY_BASE=f4533d10f31eb6dbf953123a4f6e8d85e5e4d0dfd7bb19bbc1cc5838d76a4598254e72182d235a2dd81cdbf3670f5ee8947377b8ffb803a81ad632dbc20b196f
#  volumes:
#    - /var/containerdata/dFlow/logs/dflow:/opt/dflow/log/ # Requires mapping permissions to the passenger user uid (app 9999)
#    - /var/containerdata/dFlow/logs/nginx:/var/log/nginx/
database:
  image: postgres
  environment:
    - POSTGRES_PASSWORD=mysecretpassword
  ports:
    - 5432
